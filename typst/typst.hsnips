# This file originally come from https://github.com/KarPhoon/VSCode-hsnip-for-Typst

# Define contexts for use
# Use `> Inspect Editor Tokens and Scopes` to find out what context you're in
global
function scope_math(context) {return context.scopes.some(s => s.startsWith("markup.math.typst"));}
function string(context) {return context.scopes.some(s => s.startsWith("string"));}
//function comment(context) {return context.scopes.some(s => s.startsWith("comment"));}
//function code(context) {return context.scopes.some(s => s.startsWith("meta.block.code"));}

function math(context) {return scope_math(context) == 1 & string(context) == 0;}
function text(context) {return math(context) == 0;}

//Define visual variable
const vscode = require("vscode");
var editor = vscode.window.activeTextEditor;
var document = editor.document;
let visual = "";
let timeout = null;

vscode.window.onDidChangeTextEditorSelection((e) => {
    const selectedText = e.textEditor.document.getText(e.selections[0]);
    if (selectedText) {
        visual = selectedText.replace(/\\\\/g, "\\\\\\ ").replace(/\}/g, "\\}");
        if (timeout) {
            clearTimeout(timeout); 
        }
        timeout = setTimeout(() => {
            visual = "";
        }, 5000);
    }
});
endglobal


#-------------------- text

context text(context)
snippet iff "if and only if" A
if and only if
endsnippet

context text(context)
snippet `([A-Za-z0-9'\$\)\]\}])(,|:|;)` iA
``rv = m[1] + m[2] + " "``
endsnippet


#-------------------- visual

context math(context)
snippet `(\\)({)` "overbrace()" iA
overbrace(``rv=visual``, $1)
endsnippet

context math(context)
snippet `(\\)(})` "underbrace()" iA
underbrace(``rv=visual``, $1)
endsnippet


#-------------------- math mode

context text(context)
snippet mk "Inline Math" wA
$${1}$${0}
endsnippet

# E.g. `$ ,` will be formatted to `$, `
context text(context)
snippet `(\$[" "])(\.|\,|\?|\-)` "Auto formatting after Inline Math" iwA
$``rv = m[2]`` ${0}
endsnippet

context text(context)
snippet dm "Display Math" bA
$
  ${1} 
$
${0}
endsnippet

context math(context)
snippet dis "display()" iA
display(${1:``rv=visual``})
endsnippet


#-------------------- enviroment

context text(context)
snippet `(listabc)` "list " iA
``
const map = {"listabc": "#set enum(numbering: \"a)\")"}
rv = map[m[1]] 
``
+ 
  $0
endsnippet

context text(context)
snippet `(^|\s\s+)(\\)(def|thm|pf|prop|hyp|ex|sol|eg|prob|ans|pn|lem|cor)` "Customized enviroments" bA
``
const map = {
  "def": "definition",
  "thm": "theorem",
  "pf": "proof",
  "prop": "property",
  "hyp": "hypothesis",
  "ex": "exercise",
  "sol": "solution",
  "eg": "example",
  "prob": "problem",
  "ans": "answer",
  "pn": "proposition",
  "lem": "lemma",
  "cor": "corollary",
  }
rv = m[1] + '#' + map[m[3]] + '['
``
``rv = m[1]``  $1
``rv = m[1] + ']' ``
$0
endsnippet

context text(context)
snippet `(^|\s\s+)(\\)(lemma|corollary|note|remark|question)` "Customized enviroments" bA
``
rv = m[1] + '#' + m[3] + '['
``
``rv = m[1]``  $1
``rv = m[1] + ']' ``
$0
endsnippet


#-------------------- Greek alphabet

context math(context)
snippet `(\;)(a|b|g|d|e|ve|z|h|t|i|k|vk|l|m|n|x|r|vr|s|\;t|u|p|vp|c|\;p|o)` "greek alphabet" iA
``
const map = {
  "a": "alpha",
  "b": "beta",
  "g": "gamma",
  "d": "delta",
  "e": "epsilon",
  "ve": "epsilon.alt",
  "z": "zeta",
  "h": "eta",
  "t": "theta",
  "i": "iota",
  "k": "kappa",
  "vk": "kappa.alt",
  "l": "lambda",
  "m": "mu",
  "n": "nu",
  "x": "xi",
  "r": "rho",
  "vr": "rho.alt",
  "s": "sigma",
  ";t": "tau",
  "u": "upsilon",
  "p": "phi",
  "vp": "phi.alt",
  "c": "chi",
  ";p": "psi",
  "o": "omega"
}
rv = map[m[2]] 
``
endsnippet

context math(context)
snippet `(\;)(A|B|G|D|E|Z|T|L|X|R|S|U|P|C|\;P|O)` "Greek Alphabet " iA
``
const map = {
  "A": "Alpha",
  "B": "Beta",
  "G": "Gamma",
  "D": "Delta",
  "E": "Epsilon",
  "T": "Theta",
  "L": "Lambda",
  "X": "Xi",
  "R": "Rho",
  "S": "Sigma",
  "U": "Upsilon",
  "P": "Phi",
  "C": "Chi",
  ";P": "Psi",
  "O": "Omega"
}
rv = map[m[2]] 
``
endsnippet


#-------------------- delimiters
#Need disable "editor.autoClosingBrackets" and "editor.autoClosingQuotes" in setting for typst files
#The additional regex (.?) solve the issues https://github.com/draivin/hsnips/issues/94

snippet `(.?)(\()` "()" iA
``rv = m[1]``($1)
endsnippet

snippet `(.?)(\[)` "[]" iA
``rv = m[1]``[$1]
endsnippet

snippet `(.?)(\{)` "{}" iA
``rv = m[1]``{$1}
endsnippet

context text(context)
snippet `([^\w]|^)(\")` "quote" iA
``rv = m[1] + "\""``$1``rv = "\""``
endsnippet

priority 500
context text(context)
snippet `(\"\")` "quote" iA
``rv = "\""``$1``rv = "\""``
endsnippet

context scope_math(context)
snippet `(.?)(\")` "quote" iA
``rv = m[1] + "\""``$1``rv = "\""``
endsnippet

context math(context)
snippet <> "angle.l $1 angle.r $0" iA
angle.l $1 angle.r $0
endsnippet

context math(context)
snippet abs "abs" iA
abs($1)
endsnippet


#-------------------- superscript

context math(context)
snippet tp "to the ... power" iA
^(${1:3})
endsnippet

context math(context)
snippet sr "^2" iA
^2
endsnippet

context math(context)
snippet invs "inverse" iA
^(-1)
endsnippet

context math(context)
snippet compl "complement" iA
^(complement)
endsnippet

context math(context)
snippet sdg "degree" iA
^degree
endsnippet

context math(context)
snippet cis "circle.stroked.small" iA
^circle.stroked.small
endsnippet

context math(context)
snippet rrn "RR^n" iA
RR^n
endsnippet

context math(context)
snippet CCn "CC^n" iA
CC^n
endsnippet

context math(context)
snippet afs "affine algebraic set" iA
AA_(K)^(${1:n})$0
endsnippet

context math(context)
snippet prs "projective space" iA
PP_(K)^(${1:n})$0
endsnippet


#-------------------- subscript

context math(context)
snippet `(.?)(\_)` "subscript" iA
``rv = m[1]``_($1)$0
endsnippet

context math(context)
snippet `([A-Za-z\)]|\')( _)` "Auto close space for subscript" iA
`` rv = m[1] ``_
endsnippet

context math(context)
snippet `([A-Za-z\)]|\')(\d)` "Auto subscript" iA
`` rv = m[1] + "_" + m[2]``
endsnippet

context math(context)
snippet `([A-Za-z\)]|\')_(\d{2})` "Auto subscript" iA
`` rv = m[1] + "_(" + m[2] + ")" ``
endsnippet

context math(context)
snippet `(?<![A-Za-z])([A-Za-z])([A-Za-z])\2` "Auto subscript" iA
`` rv = m[1] + "_" + m[2] ``
endsnippet

context math(context)
snippet `(')([A-Za-z])\2` "Auto subscript for prime symbol" iA
`` rv = m[1] + "_" + m[2] ``
endsnippet

context math(context)
snippet `(\)|mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|epsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)([A-Za-z])\2` "Auto subscript for greek letter" iA
`` rv = m[1] + "_" + m[2].substring(0, 1) ``
endsnippet


#-------------------- accent

context math(context)
snippet `(?<![A-Za-z])([A-Za-z01])(grave|acute|hat|tilde|macron|breve|dot|diaer|circle|caron|vec|upright|italic|bo|sans|frak|mono|cal|ov)` "hat" iA
``
const map = {"vec": "arrow", "bo": "bold", "ov": "overline" }
rv = (map[m[2]] || m[2]) + "(" + m[1] + ")"
``
endsnippet

context math(context)
snippet `(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|epsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(grave|acute|hat|tilde|macron|breve|dot|diaer|circle|caron|vec|upright|italic|o|sans|frak|mono|cal|ov)` "hat" iA
``
const map = {"vec": "arrow", "bo": "bold", "ov": "overline" }
rv = (map[m[2]] || m[2]) + "(" + m[1] + ")"
``
endsnippet

context math(context)
snippet `((grave|acute|hat|tilde|macron|breve|dot|dot\.double|dot\.triple|dot\.quad|diaer|circle|acute\.double|caron|arrow|arrow\.l|upright|italic|bold|sans|frak|mono|bb|cal|overline)\([a-zA-Z\d]+\))(grave|acute|hat|tilde|macron|breve|dot|diaer|circle|caron|vec|upright|italic|bo|sans|frak|mono|cal|ov)` "hat" iA
``
const map = {"vec": "arrow", "bo": "bold", "ov": "overline" }
rv = (map[m[3]] || m[3]) + "(" + m[1] + ")"
``
endsnippet

context math(context)
snippet ul "underline" iA
underline(${1:a})$0
endsnippet


#-------------------- arrow

priority 1000
context math(context)
snippet iff "if and only if long arrow" wA
<==> $0
endsnippet

priority 500
context math(context)
snippet iff "<=>" wA
<=> $0
endsnippet

context math(context)
snippet imp "imply" wA
==> $0
endsnippet

context math(context)
snippet imb "implied by" wA
<== $0
endsnippet


context math(context)
snippet `(^|\s\s+)(=>|<=>)` "Auto align for arrow" bA
``rv = m[1] + m[2]+ "&&"`` ${0}
endsnippet

context math(context)
snippet `(^|\s\s+)(=>|<=>)(&|&&)(  )` "Change align for arrow" bA
``
const map = {"&": "&&", "&&": "&"}
rv = m[1] + m[2]+ map[m[3]] + " "
``
endsnippet

context math(context)
snippet art "arrow.r.tail" iA
arrow.r.tail 
endsnippet

priority 100
context math(context) 
snippet to "arrow.r" wA
-> 
endsnippet

priority 100
context math(context)
snippet arl "arrow.l" wA
<- 
endsnippet


#-------------------- set symbol

context math(context)
snippet set "set" iA
{ $1 }$0
endsnippet

context math(context)
snippet cc "subset" A
subset $0
endsnippet

context math(context)
snippet `(\\)(u)` "subset" iA
union.big
endsnippet

context math(context)
snippet `(\\)(n)` "subset" iA
sect.big
endsnippet

context math(context)
snippet `(subset|supset)(=| =)` "csubset" iA
``rv = m[1]``.eq $0
endsnippet

context math(context)
snippet notin "in.not" iA
in.not
endsnippet

context math(context)
snippet sse "subset.eq" iA
subset.eq $0
endsnippet

context math(context)
snippet qs "quotient set" iA
quotientset($1)$0
endsnippet

context math(context)
snippet qg "quotient group" iA
quotientgroup($1, $2)$0
endsnippet

context math(context)
snippet inr "intersect with subscript" iA
inter_($1)$0
endsnippet

context math(context)
snippet ins "intersect" iA
inter 
endsnippet

context math(context)
snippet uni "union with subscript" iA
union_($1)$0
endsnippet

context math(context)
snippet uns "union" iA
union 
endsnippet

context math(context)
snippet usq "union.sq" iA
union.sq 
endsnippet

context math(context)
snippet ept "emptyset" iA
emptyset
endsnippet

context math(context)
snippet spe "supset.eq" iA
supset.eq
endsnippet

context math(context)
snippet spn "supset.neq" iA
supset.neq 
endsnippet

#-------------------- relation symbol

# context math(context)
# snippet == "=&" iA
# =& $0
# endsnippet

context math(context)
snippet `(^|\s\s+)(=|>|<|<=|>=)( )` "Auto align for equal" iA
``rv = m[1] + m[2]``& $0
endsnippet

context math(context)
snippet `(\& )(=|>|<|<=|>=)` "Auto align for equal" iA
``rv = m[1] + m[2] + "&"`` $0
endsnippet

context math(context)
snippet geq "greater than or equal slant" iA
gt.eq.slant $0
endsnippet

context math(context)
snippet leq "less than or equal slant" iA
lt.eq.slant $0
endsnippet

context math(context)
snippet ne "eq.not" wA
!= 
endsnippet


#-------------------- arithmetic symbol

context math(context)
snippet sq "sqrt()" iA
sqrt($1)
endsnippet

context math(context)
snippet rt "root()" iA
root(${1:n}, $2)
endsnippet

context math(context)
snippet +- "plus.minus" iA
plus.minus $0
endsnippet

context math(context)
snippet -+ "minus.plus" iA
minus.plus $0
endsnippet

context math(context)
snippet op "plus.circle" iA
plus.circle $0
endsnippet

context math(context)
snippet star "ast.op" iA
ast.op
endsnippet

context math(context)
snippet xx "times" wA
times 
endsnippet


#-------------------- calculus symbol

context math(context)
snippet lim "limit" iA
lim_(${1:n} -> ${2:oo}) $0
endsnippet

context math(context)
snippet lsup "limsup" iA
limsup_(${1:n} -> oo) $0
endsnippet

context math(context)
snippet linf "liminf" iA
liminf_(${1:n} -> oo) $0
endsnippet

# fix crash with tilde by add `( )` before `(d)`, and change
# `m[2] + m[3]` to `m[3] + m[4]`.
context math(context)
snippet `( )(d)([A-Za-z])( )` "Auto dif" iA
dif ``rv = m[3] + m[4]``
endsnippet

context math(context)
snippet `(d)(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|epsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)( |\\)` "Auto dif" iA
dif ``rv = m[2] + m[3]``
endsnippet

# fix crash with underline by add `( )` before `der`.
context math(context)
snippet `( )(der)` "derive" iA
(dif ${1:y})/(dif ${3:x})
endsnippet

context math(context)
snippet dder "derive" iA
(dif^2 ${1:y})/(dif ${3:x}^2)
endsnippet

context math(context)
snippet par "partial" iA
(diff ${1:y})/(diff ${3:x})
endsnippet

context math(context)
snippet int "integral" iA
integral
endsnippet


#-------------------- align & space

priority 500
context math(context)
snippet `(^|\s\s+)( )` "Auto add align" bA
``rv = m[1]``& $0
endsnippet

context math(context)
snippet `(^|\s+)(&|&&)(  )` "Auto change align" bA
``
const map = {"&": "&& ", "&&": ""}
rv = m[1] + map[m[2]] ``
endsnippet

context math(context)
snippet `(\S)(  )` "quad" bA
``rv = m[1]`` quad $0
endsnippet

context math(context)
snippet hf "one fifth space" iA
#h(0.2em) $0
endsnippet

#-------------------- punctuation symbols

context text(context)
snippet ，， "comma" iA
, 
endsnippet

context text(context)
snippet 。。 "dot" iA
. 
endsnippet

context text(context)
snippet ；； "semicolon" iA
; 
endsnippet

context text(context)
snippet ：： "colon" iA
: 
endsnippet

context text(context)
snippet （（ "parenthesis" iA
(
endsnippet

context text(context)
snippet ¥ "dollar" iA
\$$1\$ $0
endsnippet

context math(context)
snippet dag "dagger" iA
dagger
endsnippet


#-------------------- Abstract Algebra

context math(context)
snippet hom "morphism" iA
Hom_(${1:R})(${2:A}, ${3:B})$0
endsnippet

context math(context)
snippet ext "ext functor" iA
Ext_(${1:R})^(${2:i})(${3:A}, ${5:B})$0
endsnippet

context math(context)
snippet iso "isomorphism" iA
tilde.equiv $0
endsnippet

context math(context)
snippet glr "general linear group in RR" iA
serif("GL")_(${1:n})(RR)${0}
endsnippet

context math(context)
snippet glc "general linear group in CC" iA
serif("GL")_(${1:n})(CC)${0}
endsnippet

context math(context)
snippet slz "special linear group in ZZ" iA
serif("SL")_(${1:n})(ZZ)${0}
endsnippet

context math(context)
snippet slr "special linear group in RR" iA
serif("SL")_(${1:n})(RR)${0}
endsnippet

context math(context)
snippet slc "special linear group in CC" iA
serif("SL")_(${1:n})(CC)${0}
endsnippet

context math(context)
snippet mgz "modular group" iA
serif("PSL")_(${1:n})(${2:ZZ})${0}
endsnippet

context math(context)
snippet org "orthogonal group in RR" iA
serif("O")_(${1:n})(RR)${0}
endsnippet

context math(context)
snippet sog "special orthogonal group in RR" iA
serif("SO")_(${1:n})(RR)${0}
endsnippet

context math(context)
snippet ung "unitary group" iA
serif("U")(${1:n})${0}
endsnippet

context math(context)
snippet sug "special unitary group" iA
serif("SU")(${1:n})${0}
endsnippet

context math(context)
snippet lcs "left coset" iA
leftcoset($1, $2)$0
endsnippet

context math(context)
snippet rcs "right coset" iA
rightcoset($1, $2)$0
endsnippet

context math(context)
snippet inm "integers modulo n" iA
ZZ slash ${1:n} ZZ
endsnippet

context math(context)
snippet mng "matrix group" iA
M_(n)(G)
endsnippet

context math(context)
snippet mnr "matrix ring" iA
cal(M)_(n)(R)
endsnippet

context math(context)
snippet fgl "matrix ring for RR or CC" iA
frak(g l)_(${1:n})(${2:RR})
endsnippet

context math(context)
snippet fsl "special linear ring" iA
frak(s l)_(n)(${2:RR})
endsnippet

context math(context)
snippet fso "special orthogonal ring" iA
frak(s o)_(${1:n})(${2:RR})
endsnippet

context math(context)
snippet fsu "special uninary ring" iA
frak(s u)(${1:n})$0
endsnippet

context math(context)
snippet rmd "R module" iA
R hyph #h(0em) Mod
endsnippet

context math(context)
snippet smd "S module" iA
S hyph #h(0em) Mod
endsnippet

context math(context)
snippet sir "S^(-1)R" iA
S^(-1)R
endsnippet

context math(context)
snippet frp "frak(p)" iA
frak(p)$0
endsnippet

context math(context)
snippet frm "frak(m)" iA
frak(m)$0
endsnippet


#-------------------- Linear Algebra

context math(context)
snippet bfv "bold vector v" iA
bf(v)
endsnippet

context math(context)
snippet bfw "bold vector w" iA
bf(w)
endsnippet

context math(context)
snippet ca; "category A" iA
cat(A)
endsnippet

context math(context)
snippet cac "category C" iA
cat(C)
endsnippet

context math(context)
snippet cad "category D" iA
cat(D)
endsnippet

context math(context)
snippet otm "times.circle" iA
times.circle
endsnippet

context math(context)
snippet siva "S^(-1)A" iA
S^(-1)A
endsnippet

context math(context)
snippet sivm "S^(-1)M" iA
S^(-1)M
endsnippet

context math(context)
snippet sivr "S^(-1)R" iA
S^(-1)R
endsnippet

#-------------------- Category theory


context math(context)
snippet comp "compose" wA
compose 
endsnippet

context math(context)
snippet `([A-Z])(cat)` "Auto category" iA
cat(``rv = m[1]``)$0
endsnippet


#-------------------- Analysis

context math(context)
snippet dd "rm d" iA
rm("d")$0
endsnippet

context text(context)
snippet sgac "sigma algebra" iA
\$sigma\$-代数
endsnippet

context text(context)
snippet sgae "sigma algebra" iA
\$sigma\$-algebra
endsnippet

context math(context)
snippet pmn "phi m to n" iA
phi: M -> N$0
endsnippet

context math(context)
snippet zpn "ZZ plus.circle NN" iA
ZZ^(plus.circle NN) 
endsnippet


#-------------------- others

context math(context)
snippet ...c "dots.c" iA
dots.c
endsnippet

context math(context)
snippet `([^\,\s])( |)(\.\.\.)` "Auto dots.c" iA
``rv = m[1]`` dots.c $0
endsnippet

snippet `(\s*)([\w\s]+)(\.svg)` "figure" iA
#figure(
  image("``rv = m[2]``.svg${1}", width: 80%),
  caption: [],
)
endsnippet

context math(context)
snippet div "divides" iA
divides
endsnippet

context math(context)
snippet ndiv "divides not" iA
divides.not $0
endsnippet

context math(context)
snippet vq "variation of qed" iA
square
endsnippet

context math(context)
snippet fal "forall" iA
forall $0
endsnippet

context math(context)
snippet exi "exists" iA
exists $0
endsnippet

context math(context)
snippet ann "a_n" iA
a_n
endsnippet

context math(context)
snippet aan "A_n" iA
A_n
endsnippet

context math(context)
snippet `(scr)([A-Za-z])( )` "Auto scr font" iA
scr(``rv = m[2]``)$0
endsnippet

context math(context)
snippet `([A-Za-z])(scr)` "Auto scr font" iA
scr(``rv = m[1]``)$0
endsnippet

context math(context)
snippet `(cal)([A-Za-z])( )` "Auto cal font" iA
cal(``rv = m[2]``)$0
endsnippet

context math(context)
snippet inh "injective hook" iA
arrow.r.hook 
endsnippet

context math(context)
snippet sut "surjective twohead" iA
arrow.r.twohead 
endsnippet

context math(context)
snippet ars "arrow.r.squiggly" iA
arrow.r.squiggly 
endsnippet

context math(context)
snippet mpt "mapsto" iA
mapsto 
endsnippet

context math(context)
snippet etl "ell" iA
ell
endsnippet

context math(context)
snippet blt "bullet" iA
bullet
endsnippet

context math(context)
snippet tb "to the power of bullet" iA
^(bullet)
endsnippet

# Insert a space after `,`, `:`
context math(context)
snippet `([A-Za-z0-9'\)\]\}])(\,|:)` iA
``rv = m[1] + m[2] + " "``
endsnippet

# Insert spaces before and after `=`, `+`
context math(context)
snippet `([A-Za-z0-9)\]\}])(=|\+)` iA
``rv = m[1] + " " + m[2] + " "``
endsnippet

context math(context)
snippet `(:)(=)` iA
``rv = m[1] + m[2] + " "``
endsnippet

context math(context)
snippet mcy "mapping cylinder" wA
MCyl(alpha)^(bullet)
endsnippet